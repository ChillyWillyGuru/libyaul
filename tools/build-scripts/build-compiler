#!/bin/sh

# Copyright (c) 2012
# See LICENSE for details.
#
# Dave Murphy <davem@devkitpro.org>
# Israel Jacques <mrko@eecs.berkeley.edu>

# Look for automated configuration file to bypass prompts
[ -f 'config' ] && . './config' || panic "Configuration file 'config' not found" 1

panic () {
    printf "[1;37;1;41merror[m: [1;37;1;44m%s[m\n" "${1}" 1>&2
    exit ${2}
}

message () {
    printf "[1;37;1;44m%s[m\n" "${1}"
}

clean_up () {
    ! test -z "${BUILD_SRC_DIR}" || exit 1

    message "Cleaning up '${BUILD_SRC_DIR}'"

    rm -r -f \
        "${BUILD_SRC_DIR}/${SH_TARGET}" \
        "${BUILD_SRC_DIR}/${M68K_TARGET}" \
        "${BUILD_SRC_DIR}/extracted" \

    exit ${1}
}

trap 'clean_up 1' 2 9 15

SH_TARGET='sh-elf'
M68K_TARGET='m68k-elf'

# Sane defaults for building toolchain
CFLAGS="-O2 -pipe"
export "CFLAGS"
CXXFLAGS="${CFLAGS}"
export "CXXFLAGS"
unset "LDFLAGS"

# Add installed devkit to the path, adjusting path on minsys
PATH="${BUILD_INSTALL_DIR}/${SH_TARGET}/bin:${BUILD_INSTALL_DIR}/${M68K_TARGET}/bin:${PATH}"
export "PATH"

# Ask whether to download the source packages or not
GCC="gcc-${GCC_VERSION}.tar.bz2"
GNU_URL="ftp://ftp.gnu.org/gnu"
GCC_URL="${GNU_URL}/gcc/gcc-${GCC_VERSION}/${GCC}"
GCC_SRC_DIR="gcc-${GCC_VERSION}"

BINUTILS="binutils-${BINUTILS_VERSION}.tar.bz2"
BINUTILS_URL="$GNU_URL/binutils/${BINUTILS}"
BINUTILS_SRC_DIR="binutils-${BINUTILS_VERSION}"

GDB="gdb-${GDB_VERSION}.tar.bz2"
GDB_URL="${GNU_URL}/gdb/${GDB}"
GDB_SRC_DIR="gdb-${GDB_VERSION}"

NEWLIB_URL="ftp://sources.redhat.com/pub/newlib"
NEWLIB="newlib-${NEWLIB_VERSION}.tar.gz"
NEWLIB_URL="${NEWLIB_URL}/${NEWLIB}"
NEWLIB_SRC_DIR="newlib-${NEWLIB_VERSION}"

# Get preferred installation directory and set paths to the sources
[ ! -z "${BUILD_INSTALL_DIR}" ] || panic "Invalid install path"

# Make sure we have the proper permissions
mkdir -p "${BUILD_INSTALL_DIR}" 1> /dev/null 2>&1 && \
    test -x "${BUILD_INSTALL_DIR}" && \
    test -w "${BUILD_INSTALL_DIR}" && \
    test -r "${BUILD_INSTALL_DIR}" || \
    panic "Couldn't create install directory"

cd "${BUILD_SRC_DIR}/"
if [ "${BUILD_DOWNLOAD}" = "no" ]; then
    [ ! -f "${BINUTILS}" ] && \
        panic "'${BINUTILS}' not found in ${BUILD_SRC_DIR}" 1

    [ ! -f "${GCC}" ] && \
        panic "'${GCC}' not found in ${BUILD_SRC_DIR}" 1

    [ ! -f "${GDB}" ] && \
        panic "'${GDB}' not found in ${BUILD_SRC_DIR}" 1

    [ ! -f "${NEWLIB}" ] && \
        panic "'${NEWLIB}' not found in ${BUILD_SRC_DIR}" 1
else
    ! FETCH="`command -v "wget"`" && panic "Cannot find 'wget'" 1

    if [ ! -f "${BINUTILS}" ]; then
        message "Downloading '${BINUTILS}'"
        ("${FETCH}" "${BINUTILS_URL}") 1>> "binutils-${SH_TARGET}.log" 2>&1 || panic "Failed to download ${BINUTILS}" 1
    fi

    if [ ! -f "${GCC}" ]; then
        message "Downloading '${GCC}'"
        ("${FETCH}" "${GCC_URL}")  1>> "gcc-${SH_TARGET}.log" 2>&1 || panic "Failed to download ${GCC}" 1
    fi

    if [ ! -f "${GDB}" ]; then
        message "Downloading '${GDB}'"
        ("${FETCH}" "${GDB_URL}") 1>> "gdb-${SH_TARGET}.log" 2>&1 || panic "Failed to download ${GDB}" 1
    fi

    if [ ! -f "${NEWLIB}" ]; then
        message "Downloading '${NEWLIB}'"
        ("${FETCH}" "${NEWLIB_URL}") 1>> "newlib-${SH_TARGET}.log" 2>&1 || panic "Failed to download ${NEWLIB}" 1
    fi
fi
cd "${OLDPWD}"

for target in "${M68K_TARGET}" "${SH_TARGET}"; do
    if [ -f "${BUILD_SRC_DIR}/${target}/build-complete" ]; then
        continue
    fi

    message "${target}"

    # Begin building
    [ -f "${target}/scripts/extract" ] && . "${target}/scripts/extract"
    [ -f "${target}/scripts/patch" ] && . "${target}/scripts/patch"
    [ -f "${target}/scripts/build" ] && . "${target}/scripts/build"
    [ -f "${target}/scripts/strip" ] && . "${target}/scripts/strip"
    [ -f "${target}/scripts/finish" ] && . "${target}/scripts/finish"
done

# Clean up temporary files and source directories
clean_up 0
